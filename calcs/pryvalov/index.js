!function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(n,a,function(t){return e[t]}.bind(null,a));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="/",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);r(1);var n,a=document.getElementById("value"),u=document.getElementById("value2"),l="",o=[];function c(e,t,r){var n;switch(r){case"/":n=e/t;break;case"-":n=e-t;break;case"+":n=e+t;break;case"*":n=e*t}u.value=n}function i(e){u.value=l,a.value="",n=e}buttons.addEventListener("click",(function(e){if(!e.target.closest("button"))return;if(a.value.length>=13)return!1;var t=[0,1,2,3,4,5,6,7,8,9,"."];"clear"==e.target.innerText&&(a.value="",u.value="",l=null);for(var r=0;r<t.length;r++)e.target.innerText==t[r]&&(l+=t[r],a.value+=t[r]);if("="==e.target.innerText){var f=+a.value,s=+u.value;switch(n){case"/":c(s,f,"/"),l=u.value,a.value="";break;case"*":c(s,f,"*"),l=u.value,a.value="";break;case"+":c(s,f,"+"),l=u.value,a.value="";break;case"-":c(s,f,"-"),l=u.value,a.value=""}}else!function(e){switch(e){case"/":i("/");break;case"*":i("*");break;case"+":i("+");break;case"-":i("-")}}(e.target.innerText),console.log(o);o.push(e.target.innerText)}))},function(e,t,r){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,